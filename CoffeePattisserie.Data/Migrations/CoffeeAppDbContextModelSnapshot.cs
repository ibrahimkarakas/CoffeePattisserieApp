// <auto-generated />
using System;
using CoffeePattisserie.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeePattisserie.Data.Migrations
{
    [DbContext(typeof(CoffeeAppDbContext))]
    partial class CoffeeAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CartId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CoffeeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MoctailId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PattisserieId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductType")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("CoffeeId");

                    b.HasIndex("MoctailId");

                    b.HasIndex("PattisserieId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHome")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 8, 30, 11, 21, 40, 309, DateTimeKind.Local).AddTicks(7077),
                            Description = "Various types of coffee",
                            IsActive = true,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 8, 30, 11, 21, 40, 309, DateTimeKind.Local).AddTicks(7085),
                            Name = "Coffee"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 8, 30, 11, 21, 40, 309, DateTimeKind.Local).AddTicks(7088),
                            Description = "Various types of moctails",
                            IsActive = true,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 8, 30, 11, 21, 40, 309, DateTimeKind.Local).AddTicks(7089),
                            Name = "Moctail"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 8, 30, 11, 21, 40, 309, DateTimeKind.Local).AddTicks(7091),
                            Description = "Various types of pattisseries",
                            IsActive = true,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 8, 30, 11, 21, 40, 309, DateTimeKind.Local).AddTicks(7091),
                            Name = "Pattisserie"
                        });
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.Coffee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CaffeineContent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FlavorNotes")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHome")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginCountry")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RoastLevel")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Coffees", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CaffeineContent = 120,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2024, 8, 20, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1226),
                            FlavorNotes = "Floral, Citrus",
                            ImageUrl = "ethiopian-yirgacheffe.jpg",
                            IsActive = true,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 8, 30, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1225),
                            Name = "Ethiopian Yirgacheffe",
                            OriginCountry = "Ethiopia",
                            Price = 120m,
                            RoastLevel = "Light",
                            StockQuantity = 45
                        },
                        new
                        {
                            Id = 2,
                            CaffeineContent = 110,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 8, 8, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1237),
                            FlavorNotes = "Nutty, Chocolate",
                            ImageUrl = "colombian-supremo.jpg",
                            IsActive = true,
                            IsHome = false,
                            ModifiedDate = new DateTime(2024, 8, 30, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1236),
                            Name = "Colombian Supremo",
                            OriginCountry = "Colombia",
                            Price = 125m,
                            RoastLevel = "Medium",
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = 3,
                            CaffeineContent = 100,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2024, 8, 25, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1241),
                            FlavorNotes = "Earthy, Herbal",
                            ImageUrl = "sumatra-mandheling.jpg",
                            IsActive = true,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 8, 30, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1240),
                            Name = "Sumatra Mandheling",
                            OriginCountry = "Indonesia",
                            Price = 130m,
                            RoastLevel = "Dark",
                            StockQuantity = 30
                        },
                        new
                        {
                            Id = 4,
                            CaffeineContent = 115,
                            CategoryId = 4,
                            CreatedDate = new DateTime(2024, 8, 20, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1244),
                            FlavorNotes = "Sweet, Nutty",
                            ImageUrl = "brazil-santos.jpg",
                            IsActive = true,
                            IsHome = false,
                            ModifiedDate = new DateTime(2024, 8, 30, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1243),
                            Name = "Brazil Santos",
                            OriginCountry = "Brazil",
                            Price = 135m,
                            RoastLevel = "Medium",
                            StockQuantity = 120
                        },
                        new
                        {
                            Id = 5,
                            CaffeineContent = 105,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2024, 7, 31, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1247),
                            FlavorNotes = "Smooth, Sweet, Mild",
                            ImageUrl = "jamaican-blue-mountain.jpg",
                            IsActive = true,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 8, 30, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1247),
                            Name = "Jamaican Blue Mountain",
                            OriginCountry = "Jamaica",
                            Price = 140m,
                            RoastLevel = "Light",
                            StockQuantity = 10
                        },
                        new
                        {
                            Id = 6,
                            CaffeineContent = 110,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 8, 15, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1250),
                            FlavorNotes = "Fruity, Winey",
                            ImageUrl = "kenyan-aa.jpg",
                            IsActive = true,
                            IsHome = false,
                            ModifiedDate = new DateTime(2024, 8, 30, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1250),
                            Name = "Kenyan AA",
                            OriginCountry = "Kenya",
                            Price = 145m,
                            RoastLevel = "Medium",
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = 7,
                            CaffeineContent = 115,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2024, 8, 10, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1254),
                            FlavorNotes = "Citrus, Chocolate",
                            ImageUrl = "costa-rican-tarrazu.jpg",
                            IsActive = true,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 8, 30, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1253),
                            Name = "Costa Rican Tarrazu",
                            OriginCountry = "Costa Rica",
                            Price = 125m,
                            RoastLevel = "Light",
                            StockQuantity = 35
                        },
                        new
                        {
                            Id = 8,
                            CaffeineContent = 105,
                            CategoryId = 4,
                            CreatedDate = new DateTime(2024, 8, 5, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1256),
                            FlavorNotes = "Spicy, Smoky",
                            ImageUrl = "guatemalan-antigua.jpg",
                            IsActive = true,
                            IsHome = false,
                            ModifiedDate = new DateTime(2024, 8, 30, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1256),
                            Name = "Guatemalan Antigua",
                            OriginCountry = "Guatemala",
                            Price = 150m,
                            RoastLevel = "Medium",
                            StockQuantity = 20
                        },
                        new
                        {
                            Id = 9,
                            CaffeineContent = 100,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2024, 8, 12, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1260),
                            FlavorNotes = "Nutty, Caramel",
                            ImageUrl = "mexican-altura.jpg",
                            IsActive = true,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 8, 30, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1259),
                            Name = "Mexican Altura",
                            OriginCountry = "Mexico",
                            Price = 140m,
                            RoastLevel = "Light",
                            StockQuantity = 60
                        },
                        new
                        {
                            Id = 10,
                            CaffeineContent = 110,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 8, 18, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1262),
                            FlavorNotes = "Rich, Buttery",
                            ImageUrl = "hawaiian-kona.jpg",
                            IsActive = true,
                            IsHome = false,
                            ModifiedDate = new DateTime(2024, 8, 30, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1262),
                            Name = "Hawaiian Kona",
                            OriginCountry = "Hawaii",
                            Price = 130m,
                            RoastLevel = "Medium",
                            StockQuantity = 15
                        },
                        new
                        {
                            Id = 11,
                            CaffeineContent = 105,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2024, 8, 22, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1266),
                            FlavorNotes = "Chocolate, Spicy",
                            ImageUrl = "yemen-mocha.jpg",
                            IsActive = true,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 8, 30, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1266),
                            Name = "Yemen Mocha",
                            OriginCountry = "Yemen",
                            Price = 125m,
                            RoastLevel = "Dark",
                            StockQuantity = 25
                        },
                        new
                        {
                            Id = 12,
                            CaffeineContent = 115,
                            CategoryId = 4,
                            CreatedDate = new DateTime(2024, 8, 24, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1269),
                            FlavorNotes = "Sweet, Floral",
                            ImageUrl = "ecuador-vilcabamba.jpg",
                            IsActive = true,
                            IsHome = false,
                            ModifiedDate = new DateTime(2024, 8, 30, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1268),
                            Name = "Ecuador Vilcabamba",
                            OriginCountry = "Ecuador",
                            Price = 140m,
                            RoastLevel = "Light",
                            StockQuantity = 20
                        },
                        new
                        {
                            Id = 13,
                            CaffeineContent = 110,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 8, 25, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1272),
                            FlavorNotes = "Smooth and rich",
                            ImageUrl = "americano.jpg",
                            IsActive = true,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 8, 30, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1271),
                            Name = "Americano",
                            OriginCountry = "USA",
                            Price = 15m,
                            RoastLevel = "Medium",
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = 14,
                            CaffeineContent = 115,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 8, 27, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1276),
                            FlavorNotes = "Creamy and frothy",
                            ImageUrl = "cappuccino.jpg",
                            IsActive = true,
                            IsHome = false,
                            ModifiedDate = new DateTime(2024, 8, 30, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1275),
                            Name = "Cappuccino",
                            OriginCountry = "Italy",
                            Price = 25m,
                            RoastLevel = "Medium",
                            StockQuantity = 60
                        },
                        new
                        {
                            Id = 15,
                            CaffeineContent = 100,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 8, 28, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1279),
                            FlavorNotes = "Cool and refreshing",
                            ImageUrl = "cold_brew.jpg",
                            IsActive = true,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 8, 30, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1278),
                            Name = "Cold Brew",
                            OriginCountry = "USA",
                            Price = 30m,
                            RoastLevel = "Light",
                            StockQuantity = 40
                        },
                        new
                        {
                            Id = 16,
                            CaffeineContent = 120,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 8, 29, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1281),
                            FlavorNotes = "Strong and bold",
                            ImageUrl = "espresso.jpg",
                            IsActive = true,
                            IsHome = false,
                            ModifiedDate = new DateTime(2024, 8, 30, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1281),
                            Name = "Espresso",
                            OriginCountry = "Italy",
                            Price = 20m,
                            RoastLevel = "Dark",
                            StockQuantity = 70
                        },
                        new
                        {
                            Id = 17,
                            CaffeineContent = 115,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 8, 22, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1284),
                            FlavorNotes = "Smooth and silky",
                            ImageUrl = "flat_white.jpg",
                            IsActive = true,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 8, 30, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1284),
                            Name = "Flat White",
                            OriginCountry = "Australia",
                            Price = 28m,
                            RoastLevel = "Medium",
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = 18,
                            CaffeineContent = 110,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 8, 23, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1287),
                            FlavorNotes = "Mild and creamy",
                            ImageUrl = "latte.jpg",
                            IsActive = true,
                            IsHome = false,
                            ModifiedDate = new DateTime(2024, 8, 30, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(1286),
                            Name = "Latte",
                            OriginCountry = "Italy",
                            Price = 30m,
                            RoastLevel = "Light",
                            StockQuantity = 60
                        });
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.CoffeeCategory", b =>
                {
                    b.Property<int>("CoffeeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CoffeeId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CoffeeCategories", (string)null);

                    b.HasData(
                        new
                        {
                            CoffeeId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            CoffeeId = 1,
                            CategoryId = 3
                        },
                        new
                        {
                            CoffeeId = 1,
                            CategoryId = 4
                        },
                        new
                        {
                            CoffeeId = 2,
                            CategoryId = 2
                        },
                        new
                        {
                            CoffeeId = 3,
                            CategoryId = 3
                        },
                        new
                        {
                            CoffeeId = 4,
                            CategoryId = 1
                        },
                        new
                        {
                            CoffeeId = 5,
                            CategoryId = 2
                        },
                        new
                        {
                            CoffeeId = 5,
                            CategoryId = 3
                        },
                        new
                        {
                            CoffeeId = 2,
                            CategoryId = 4
                        },
                        new
                        {
                            CoffeeId = 4,
                            CategoryId = 4
                        },
                        new
                        {
                            CoffeeId = 3,
                            CategoryId = 4
                        },
                        new
                        {
                            CoffeeId = 2,
                            CategoryId = 3
                        },
                        new
                        {
                            CoffeeId = 3,
                            CategoryId = 1
                        });
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.Moctail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("FlavorProfile")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHome")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PreparationMethod")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Moctails", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2024, 8, 20, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(4869),
                            Description = "A refreshing mint and lime drink.",
                            FlavorProfile = "Minty, Citrusy",
                            ImageUrl = "virgin-mojito.jpg",
                            Ingredients = "Mint, Lime, Soda Water, Sugar",
                            IsActive = true,
                            IsHome = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Virgin Mojito",
                            PreparationMethod = "Muddle mint leaves and lime wedges, add sugar and soda water.",
                            Price = 140m,
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2024, 8, 21, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(4880),
                            Description = "A sweet and fizzy drink with grenadine.",
                            FlavorProfile = "Sweet, Fizzy",
                            ImageUrl = "shirley-temple.jpg",
                            Ingredients = "Ginger Ale, Grenadine, Maraschino Cherry",
                            IsActive = true,
                            IsHome = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Shirley Temple",
                            PreparationMethod = "Mix ginger ale with grenadine and top with a cherry.",
                            Price = 125m,
                            StockQuantity = 60
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 8, 22, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(4885),
                            Description = "A tropical blend of pineapple and coconut.",
                            FlavorProfile = "Tropical, Creamy",
                            ImageUrl = "pina-colada.jpg",
                            Ingredients = "Pineapple Juice, Coconut Cream, Ice",
                            IsActive = true,
                            IsHome = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pina Colada",
                            PreparationMethod = "Blend pineapple juice and coconut cream with ice.",
                            Price = 150m,
                            StockQuantity = 40
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 8, 23, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(4893),
                            Description = "A fruity drink with orange, pineapple, and lemon.",
                            FlavorProfile = "Fruity, Tangy",
                            ImageUrl = "cinderella.jpg",
                            Ingredients = "Orange Juice, Pineapple Juice, Lemon Juice, Grenadine",
                            IsActive = true,
                            IsHome = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cinderella",
                            PreparationMethod = "Shake all ingredients with ice and strain into a glass.",
                            Price = 130m,
                            StockQuantity = 70
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2024, 8, 24, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(4896),
                            Description = "A vibrant mix of orange and grenadine.",
                            FlavorProfile = "Citrusy, Sweet",
                            ImageUrl = "sunrise.jpg",
                            Ingredients = "Orange Juice, Grenadine, Ice",
                            IsActive = true,
                            IsHome = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sunrise",
                            PreparationMethod = "Pour orange juice over ice and drizzle with grenadine.",
                            Price = 145m,
                            StockQuantity = 55
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2024, 8, 25, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(4901),
                            Description = "A delightful mix of various fruit juices.",
                            FlavorProfile = "Fruity, Refreshing",
                            ImageUrl = "fruit-punch.jpg",
                            Ingredients = "Orange Juice, Pineapple Juice, Cranberry Juice, Lemon Juice",
                            IsActive = true,
                            IsHome = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fruit Punch",
                            PreparationMethod = "Mix all juices together and serve over ice.",
                            Price = 120m,
                            StockQuantity = 65
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2024, 8, 26, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(4904),
                            Description = "A non-alcoholic version of the classic Bloody Mary.",
                            FlavorProfile = "Savory, Spicy",
                            ImageUrl = "virgin-mary.jpg",
                            Ingredients = "Tomato Juice, Lemon Juice, Worcestershire Sauce, Tabasco",
                            IsActive = true,
                            IsHome = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Virgin Mary",
                            PreparationMethod = "Mix all ingredients together and serve over ice.",
                            Price = 135m,
                            StockQuantity = 45
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2024, 8, 27, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(4906),
                            Description = "A refreshing mix of various berries.",
                            FlavorProfile = "Berry, Tangy",
                            ImageUrl = "berry-cooler.jpg",
                            Ingredients = "Strawberries, Blueberries, Raspberries, Lemonade",
                            IsActive = true,
                            IsHome = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Berry Cooler",
                            PreparationMethod = "Blend all ingredients with ice.",
                            Price = 125m,
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2024, 8, 28, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(4910),
                            Description = "A refreshing lemonade with a hint of mint.",
                            FlavorProfile = "Minty, Citrusy",
                            ImageUrl = "mint-lemonade.jpg",
                            Ingredients = "Lemon Juice, Mint Leaves, Sugar, Water",
                            IsActive = true,
                            IsHome = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mint Lemonade",
                            PreparationMethod = "Mix lemon juice and sugar with water and add mint leaves.",
                            Price = 130m,
                            StockQuantity = 70
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 8, 29, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(4914),
                            Description = "A fizzy drink with tropical flavors.",
                            FlavorProfile = "Tropical, Fizzy",
                            ImageUrl = "tropical-fizz.jpg",
                            Ingredients = "Pineapple Juice, Orange Juice, Soda Water",
                            IsActive = true,
                            IsHome = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tropical Fizz",
                            PreparationMethod = "Mix pineapple juice and orange juice with soda water.",
                            Price = 140m,
                            StockQuantity = 55
                        });
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.MoctailCategory", b =>
                {
                    b.Property<int>("MoctailId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MoctailId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("MoctailCategories", (string)null);

                    b.HasData(
                        new
                        {
                            MoctailId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            MoctailId = 1,
                            CategoryId = 2
                        },
                        new
                        {
                            MoctailId = 2,
                            CategoryId = 3
                        },
                        new
                        {
                            MoctailId = 3,
                            CategoryId = 1
                        },
                        new
                        {
                            MoctailId = 3,
                            CategoryId = 2
                        },
                        new
                        {
                            MoctailId = 4,
                            CategoryId = 4
                        },
                        new
                        {
                            MoctailId = 5,
                            CategoryId = 3
                        },
                        new
                        {
                            MoctailId = 6,
                            CategoryId = 5
                        });
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CoffeeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MoctailId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PattisserieId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductType")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CoffeeId");

                    b.HasIndex("MoctailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PattisserieId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.Pattisserie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Allergens")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHome")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShelfLife")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Pattisseries", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Allergens = "Eggs, Milk, Gluten",
                            CategoryId = 1,
                            CreatedDate = new DateTime(2024, 8, 20, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(8493),
                            Description = "A rich and moist chocolate cake.",
                            ImageUrl = "chocolate-cake.jpg",
                            Ingredients = "Flour, Sugar, Cocoa, Baking Powder, Eggs, Milk",
                            IsActive = true,
                            IsHome = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chocolate Cake",
                            Price = 120m,
                            ShelfLife = "3 days",
                            StockQuantity = 30
                        },
                        new
                        {
                            Id = 2,
                            Allergens = "Eggs, Milk, Gluten",
                            CategoryId = 1,
                            CreatedDate = new DateTime(2024, 8, 21, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(8503),
                            Description = "A fluffy vanilla cupcake with buttercream frosting.",
                            ImageUrl = "vanilla-cupcake.jpg",
                            Ingredients = "Flour, Sugar, Butter, Eggs, Vanilla Extract",
                            IsActive = true,
                            IsHome = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Vanilla Cupcake",
                            Price = 125m,
                            ShelfLife = "2 days",
                            StockQuantity = 40
                        },
                        new
                        {
                            Id = 3,
                            Allergens = "Milk, Gluten",
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 8, 22, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(8506),
                            Description = "A tart filled with fresh strawberries and cream.",
                            ImageUrl = "strawberry-tart.jpg",
                            Ingredients = "Flour, Sugar, Butter, Strawberries, Cream",
                            IsActive = true,
                            IsHome = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Strawberry Tart",
                            Price = 130m,
                            ShelfLife = "1 day",
                            StockQuantity = 25
                        },
                        new
                        {
                            Id = 4,
                            Allergens = "Eggs, Milk, Gluten",
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 8, 23, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(8510),
                            Description = "A tart lemon pie with a fluffy meringue topping.",
                            ImageUrl = "lemon-meringue-pie.jpg",
                            Ingredients = "Flour, Sugar, Eggs, Lemons, Butter",
                            IsActive = true,
                            IsHome = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lemon Meringue Pie",
                            Price = 145m,
                            ShelfLife = "2 days",
                            StockQuantity = 20
                        },
                        new
                        {
                            Id = 5,
                            Allergens = "Eggs, Milk, Gluten",
                            CategoryId = 3,
                            CreatedDate = new DateTime(2024, 8, 24, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(8512),
                            Description = "A moist muffin packed with fresh blueberries.",
                            ImageUrl = "blueberry-muffin.jpg",
                            Ingredients = "Flour, Sugar, Blueberries, Eggs, Milk",
                            IsActive = true,
                            IsHome = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Blueberry Muffin",
                            Price = 135m,
                            ShelfLife = "3 days",
                            StockQuantity = 35
                        },
                        new
                        {
                            Id = 6,
                            Allergens = "Eggs, Milk, Gluten",
                            CategoryId = 3,
                            CreatedDate = new DateTime(2024, 8, 25, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(8516),
                            Description = "A creamy cheesecake with a raspberry swirl.",
                            ImageUrl = "raspberry-cheesecake.jpg",
                            Ingredients = "Cream Cheese, Sugar, Eggs, Raspberries, Graham Cracker Crust",
                            IsActive = true,
                            IsHome = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Raspberry Cheesecake",
                            Price = 140m,
                            ShelfLife = "5 days",
                            StockQuantity = 15
                        },
                        new
                        {
                            Id = 7,
                            Allergens = "Eggs, Milk, Gluten",
                            CategoryId = 1,
                            CreatedDate = new DateTime(2024, 8, 26, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(8519),
                            Description = "A classic cookie loaded with chocolate chips.",
                            ImageUrl = "chocolate-chip-cookie.jpg",
                            Ingredients = "Flour, Sugar, Butter, Eggs, Chocolate Chips",
                            IsActive = true,
                            IsHome = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chocolate Chip Cookie",
                            Price = 120m,
                            ShelfLife = "5 days",
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = 8,
                            Allergens = "Eggs, Nuts",
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 8, 27, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(8539),
                            Description = "A delicate French pastry with a creamy filling.",
                            ImageUrl = "macaron.jpg",
                            Ingredients = "Almond Flour, Sugar, Egg Whites, Food Coloring",
                            IsActive = true,
                            IsHome = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Macaron",
                            Price = 150m,
                            ShelfLife = "1 week",
                            StockQuantity = 45
                        },
                        new
                        {
                            Id = 9,
                            Allergens = "Milk, Gluten",
                            CategoryId = 1,
                            CreatedDate = new DateTime(2024, 8, 28, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(8542),
                            Description = "A buttery, flaky pastry.",
                            ImageUrl = "croissant.jpg",
                            Ingredients = "Flour, Butter, Sugar, Yeast, Salt",
                            IsActive = true,
                            IsHome = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Croissant",
                            Price = 125m,
                            ShelfLife = "2 days",
                            StockQuantity = 30
                        },
                        new
                        {
                            Id = 10,
                            Allergens = "Eggs, Milk, Gluten",
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 8, 29, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(8546),
                            Description = "A spiced pumpkin pie with a flaky crust.",
                            ImageUrl = "pumpkin-pie.jpg",
                            Ingredients = "Pumpkin, Sugar, Eggs, Cream, Spices, Flour",
                            IsActive = true,
                            IsHome = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pumpkin Pie",
                            Price = 140m,
                            ShelfLife = "3 days",
                            StockQuantity = 20
                        },
                        new
                        {
                            Id = 11,
                            Allergens = "Eggs, Milk, Gluten",
                            CategoryId = 3,
                            CreatedDate = new DateTime(2024, 8, 18, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(8549),
                            Description = "A classic red velvet cake with cream cheese frosting.",
                            ImageUrl = "red-velvet-cake.jpg",
                            Ingredients = "Flour, Sugar, Cocoa, Buttermilk, Eggs, Red Food Coloring",
                            IsActive = true,
                            IsHome = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Red Velvet Cake",
                            Price = 135m,
                            ShelfLife = "3 days",
                            StockQuantity = 30
                        },
                        new
                        {
                            Id = 12,
                            Allergens = "Eggs, Milk, Gluten",
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 8, 19, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(8553),
                            Description = "A moist bread made with ripe bananas.",
                            ImageUrl = "banana-bread.jpg",
                            Ingredients = "Flour, Sugar, Bananas, Eggs, Butter",
                            IsActive = true,
                            IsHome = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Banana Bread",
                            Price = 130m,
                            ShelfLife = "1 week",
                            StockQuantity = 25
                        },
                        new
                        {
                            Id = 13,
                            Allergens = "Milk, Gluten",
                            CategoryId = 3,
                            CreatedDate = new DateTime(2024, 8, 20, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(8555),
                            Description = "A classic pie filled with spiced apples.",
                            ImageUrl = "apple-pie.jpg",
                            Ingredients = "Apples, Sugar, Flour, Butter, Cinnamon",
                            IsActive = true,
                            IsHome = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Apple Pie",
                            Price = 145m,
                            ShelfLife = "3 days",
                            StockQuantity = 20
                        },
                        new
                        {
                            Id = 14,
                            Allergens = "Eggs, Milk, Gluten",
                            CategoryId = 1,
                            CreatedDate = new DateTime(2024, 8, 21, 11, 21, 40, 310, DateTimeKind.Local).AddTicks(8557),
                            Description = "A choux pastry filled with cream and topped with chocolate.",
                            ImageUrl = "chocolate-eclair.jpg",
                            Ingredients = "Flour, Eggs, Butter, Cream, Chocolate",
                            IsActive = true,
                            IsHome = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chocolate Eclair",
                            Price = 125m,
                            ShelfLife = "2 days",
                            StockQuantity = 15
                        });
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.PattisserieCategory", b =>
                {
                    b.Property<int>("PattisserieId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PattisserieId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("PattisserieCategories", (string)null);

                    b.HasData(
                        new
                        {
                            PattisserieId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            PattisserieId = 1,
                            CategoryId = 3
                        },
                        new
                        {
                            PattisserieId = 2,
                            CategoryId = 2
                        },
                        new
                        {
                            PattisserieId = 3,
                            CategoryId = 1
                        },
                        new
                        {
                            PattisserieId = 4,
                            CategoryId = 4
                        },
                        new
                        {
                            PattisserieId = 5,
                            CategoryId = 2
                        },
                        new
                        {
                            PattisserieId = 5,
                            CategoryId = 5
                        },
                        new
                        {
                            PattisserieId = 2,
                            CategoryId = 4
                        },
                        new
                        {
                            PattisserieId = 3,
                            CategoryId = 2
                        },
                        new
                        {
                            PattisserieId = 4,
                            CategoryId = 3
                        });
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.CartItem", b =>
                {
                    b.HasOne("CoffeePattisserie.Entity.Concrete.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeePattisserie.Entity.Concrete.Coffee", "Coffee")
                        .WithMany()
                        .HasForeignKey("CoffeeId");

                    b.HasOne("CoffeePattisserie.Entity.Concrete.Moctail", "Moctail")
                        .WithMany()
                        .HasForeignKey("MoctailId");

                    b.HasOne("CoffeePattisserie.Entity.Concrete.Pattisserie", "Pattisserie")
                        .WithMany()
                        .HasForeignKey("PattisserieId");

                    b.Navigation("Cart");

                    b.Navigation("Coffee");

                    b.Navigation("Moctail");

                    b.Navigation("Pattisserie");
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.CoffeeCategory", b =>
                {
                    b.HasOne("CoffeePattisserie.Entity.Concrete.Category", "Category")
                        .WithMany("CoffeeCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeePattisserie.Entity.Concrete.Coffee", "Coffee")
                        .WithMany("CoffeeCategories")
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Coffee");
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.MoctailCategory", b =>
                {
                    b.HasOne("CoffeePattisserie.Entity.Concrete.Category", "Category")
                        .WithMany("MoctailCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeePattisserie.Entity.Concrete.Moctail", "Moctail")
                        .WithMany("MoctailCategories")
                        .HasForeignKey("MoctailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Moctail");
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.OrderItem", b =>
                {
                    b.HasOne("CoffeePattisserie.Entity.Concrete.Coffee", "Coffee")
                        .WithMany()
                        .HasForeignKey("CoffeeId");

                    b.HasOne("CoffeePattisserie.Entity.Concrete.Moctail", "Moctail")
                        .WithMany()
                        .HasForeignKey("MoctailId");

                    b.HasOne("CoffeePattisserie.Entity.Concrete.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeePattisserie.Entity.Concrete.Pattisserie", "Pattisserie")
                        .WithMany()
                        .HasForeignKey("PattisserieId");

                    b.Navigation("Coffee");

                    b.Navigation("Moctail");

                    b.Navigation("Order");

                    b.Navigation("Pattisserie");
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.PattisserieCategory", b =>
                {
                    b.HasOne("CoffeePattisserie.Entity.Concrete.Category", "Category")
                        .WithMany("PattisserieCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeePattisserie.Entity.Concrete.Pattisserie", "Pattisserie")
                        .WithMany("PattisserieCategories")
                        .HasForeignKey("PattisserieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Pattisserie");
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.Category", b =>
                {
                    b.Navigation("CoffeeCategories");

                    b.Navigation("MoctailCategories");

                    b.Navigation("PattisserieCategories");
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.Coffee", b =>
                {
                    b.Navigation("CoffeeCategories");
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.Moctail", b =>
                {
                    b.Navigation("MoctailCategories");
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.Pattisserie", b =>
                {
                    b.Navigation("PattisserieCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
