// <auto-generated />
using System;
using CoffeePattisserie.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeePattisserie.Data.Migrations
{
    [DbContext(typeof(CoffeeAppDbContext))]
    [Migration("20240804151059_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kahve kategorisi",
                            IsActive = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Coffees"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tatlı kategorisi",
                            IsActive = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Deserts"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fırın kategorisi",
                            IsActive = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pattisserie"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Toptan satış kategorisi",
                            IsActive = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Wholesales"
                        });
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.Coffee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaffeineContent")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlavorNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("OriginCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(16,2)");

                    b.Property<string>("RoastLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CaffeineContent = 120,
                            CategoryId = 0,
                            CreatedDate = new DateTime(2024, 7, 25, 18, 10, 58, 937, DateTimeKind.Local).AddTicks(9515),
                            FlavorNotes = "Floral, Citrus",
                            IsActive = true,
                            ModifiedDate = new DateTime(2024, 8, 4, 18, 10, 58, 937, DateTimeKind.Local).AddTicks(9514),
                            Name = "Ethiopian Yirgacheffe",
                            OriginCountry = "Ethiopia",
                            Price = 350m,
                            RoastLevel = "Light",
                            StockQuantity = 45
                        },
                        new
                        {
                            Id = 2,
                            CaffeineContent = 110,
                            CategoryId = 0,
                            CreatedDate = new DateTime(2024, 7, 13, 18, 10, 58, 937, DateTimeKind.Local).AddTicks(9525),
                            FlavorNotes = "Nutty, Chocolate",
                            IsActive = true,
                            ModifiedDate = new DateTime(2024, 8, 4, 18, 10, 58, 937, DateTimeKind.Local).AddTicks(9524),
                            Name = "Colombian Supremo",
                            OriginCountry = "Colombia",
                            Price = 299m,
                            RoastLevel = "Medium",
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = 3,
                            CaffeineContent = 100,
                            CategoryId = 0,
                            CreatedDate = new DateTime(2024, 7, 30, 18, 10, 58, 937, DateTimeKind.Local).AddTicks(9528),
                            FlavorNotes = "Earthy, Herbal",
                            IsActive = true,
                            ModifiedDate = new DateTime(2024, 8, 4, 18, 10, 58, 937, DateTimeKind.Local).AddTicks(9527),
                            Name = "Sumatra Mandheling",
                            OriginCountry = "Indonesia",
                            Price = 499m,
                            RoastLevel = "Dark",
                            StockQuantity = 30
                        },
                        new
                        {
                            Id = 4,
                            CaffeineContent = 115,
                            CategoryId = 0,
                            CreatedDate = new DateTime(2024, 7, 25, 18, 10, 58, 937, DateTimeKind.Local).AddTicks(9530),
                            FlavorNotes = "Sweet, Nutty",
                            IsActive = true,
                            ModifiedDate = new DateTime(2024, 8, 4, 18, 10, 58, 937, DateTimeKind.Local).AddTicks(9530),
                            Name = "Brazil Santos",
                            OriginCountry = "Brazil",
                            Price = 250m,
                            RoastLevel = "Medium",
                            StockQuantity = 120
                        },
                        new
                        {
                            Id = 5,
                            CaffeineContent = 105,
                            CategoryId = 0,
                            CreatedDate = new DateTime(2024, 7, 5, 18, 10, 58, 937, DateTimeKind.Local).AddTicks(9533),
                            FlavorNotes = "Smooth, Sweet, Mild",
                            IsActive = true,
                            ModifiedDate = new DateTime(2024, 8, 4, 18, 10, 58, 937, DateTimeKind.Local).AddTicks(9532),
                            Name = "Jamaican Blue Mountain",
                            OriginCountry = "Jamaica",
                            Price = 899m,
                            RoastLevel = "Light",
                            StockQuantity = 10
                        });
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.CoffeeCategory", b =>
                {
                    b.Property<int>("CoffeeId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("CoffeeId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CoffeeCategories", (string)null);

                    b.HasData(
                        new
                        {
                            CoffeeId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            CoffeeId = 1,
                            CategoryId = 3
                        },
                        new
                        {
                            CoffeeId = 1,
                            CategoryId = 4
                        },
                        new
                        {
                            CoffeeId = 2,
                            CategoryId = 2
                        },
                        new
                        {
                            CoffeeId = 3,
                            CategoryId = 3
                        },
                        new
                        {
                            CoffeeId = 4,
                            CategoryId = 1
                        },
                        new
                        {
                            CoffeeId = 5,
                            CategoryId = 2
                        },
                        new
                        {
                            CoffeeId = 5,
                            CategoryId = 3
                        },
                        new
                        {
                            CoffeeId = 2,
                            CategoryId = 4
                        },
                        new
                        {
                            CoffeeId = 4,
                            CategoryId = 4
                        },
                        new
                        {
                            CoffeeId = 3,
                            CategoryId = 4
                        },
                        new
                        {
                            CoffeeId = 2,
                            CategoryId = 3
                        },
                        new
                        {
                            CoffeeId = 3,
                            CategoryId = 1
                        });
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.Moctail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlavorProfile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreparationMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Moctails");
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.Pattisserie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergens")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShelfLife")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PattisserieProducts");
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.CoffeeCategory", b =>
                {
                    b.HasOne("CoffeePattisserie.Entity.Concrete.Category", "Category")
                        .WithMany("CoffeeCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeePattisserie.Entity.Concrete.Coffee", "Coffee")
                        .WithMany("CoffeeCategories")
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Coffee");
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.Category", b =>
                {
                    b.Navigation("CoffeeCategories");
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.Coffee", b =>
                {
                    b.Navigation("CoffeeCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
