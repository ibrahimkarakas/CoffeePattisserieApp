// <auto-generated />
using System;
using CoffeePattisserie.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeePattisserie.Data.Migrations
{
    [DbContext(typeof(CoffeeAppDbContext))]
    [Migration("20240805135110_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kahve kategorisi",
                            IsActive = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Coffees"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tatlı kategorisi",
                            IsActive = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Deserts"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fırın kategorisi",
                            IsActive = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pattisserie"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Toptan satış kategorisi",
                            IsActive = false,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Wholesales"
                        });
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.Coffee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CaffeineContent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FlavorNotes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginCountry")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("real");

                    b.Property<string>("RoastLevel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CaffeineContent = 120,
                            CategoryId = 0,
                            CreatedDate = new DateTime(2024, 7, 26, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(16),
                            FlavorNotes = "Floral, Citrus",
                            IsActive = true,
                            ModifiedDate = new DateTime(2024, 8, 5, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(15),
                            Name = "Ethiopian Yirgacheffe",
                            OriginCountry = "Ethiopia",
                            Price = 350m,
                            RoastLevel = "Light",
                            StockQuantity = 45
                        },
                        new
                        {
                            Id = 2,
                            CaffeineContent = 110,
                            CategoryId = 0,
                            CreatedDate = new DateTime(2024, 7, 14, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(26),
                            FlavorNotes = "Nutty, Chocolate",
                            IsActive = true,
                            ModifiedDate = new DateTime(2024, 8, 5, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(25),
                            Name = "Colombian Supremo",
                            OriginCountry = "Colombia",
                            Price = 299m,
                            RoastLevel = "Medium",
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = 3,
                            CaffeineContent = 100,
                            CategoryId = 0,
                            CreatedDate = new DateTime(2024, 7, 31, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(29),
                            FlavorNotes = "Earthy, Herbal",
                            IsActive = true,
                            ModifiedDate = new DateTime(2024, 8, 5, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(28),
                            Name = "Sumatra Mandheling",
                            OriginCountry = "Indonesia",
                            Price = 499m,
                            RoastLevel = "Dark",
                            StockQuantity = 30
                        },
                        new
                        {
                            Id = 4,
                            CaffeineContent = 115,
                            CategoryId = 0,
                            CreatedDate = new DateTime(2024, 7, 26, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(31),
                            FlavorNotes = "Sweet, Nutty",
                            IsActive = true,
                            ModifiedDate = new DateTime(2024, 8, 5, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(31),
                            Name = "Brazil Santos",
                            OriginCountry = "Brazil",
                            Price = 250m,
                            RoastLevel = "Medium",
                            StockQuantity = 120
                        },
                        new
                        {
                            Id = 5,
                            CaffeineContent = 105,
                            CategoryId = 0,
                            CreatedDate = new DateTime(2024, 7, 6, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(34),
                            FlavorNotes = "Smooth, Sweet, Mild",
                            IsActive = true,
                            ModifiedDate = new DateTime(2024, 8, 5, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(33),
                            Name = "Jamaican Blue Mountain",
                            OriginCountry = "Jamaica",
                            Price = 899m,
                            RoastLevel = "Light",
                            StockQuantity = 10
                        });
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.CoffeeCategory", b =>
                {
                    b.Property<int>("CoffeeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CoffeeId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CoffeeCategories", (string)null);

                    b.HasData(
                        new
                        {
                            CoffeeId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            CoffeeId = 1,
                            CategoryId = 3
                        },
                        new
                        {
                            CoffeeId = 1,
                            CategoryId = 4
                        },
                        new
                        {
                            CoffeeId = 2,
                            CategoryId = 2
                        },
                        new
                        {
                            CoffeeId = 3,
                            CategoryId = 3
                        },
                        new
                        {
                            CoffeeId = 4,
                            CategoryId = 1
                        },
                        new
                        {
                            CoffeeId = 5,
                            CategoryId = 2
                        },
                        new
                        {
                            CoffeeId = 5,
                            CategoryId = 3
                        },
                        new
                        {
                            CoffeeId = 2,
                            CategoryId = 4
                        },
                        new
                        {
                            CoffeeId = 4,
                            CategoryId = 4
                        },
                        new
                        {
                            CoffeeId = 3,
                            CategoryId = 4
                        },
                        new
                        {
                            CoffeeId = 2,
                            CategoryId = 3
                        },
                        new
                        {
                            CoffeeId = 3,
                            CategoryId = 1
                        });
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.Moctail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("FlavorProfile")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PreparationMethod")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("real");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Moctails", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 7, 21, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(3342),
                            Description = "Refreshing non-alcoholic cocktail with mint and lime.",
                            FlavorProfile = "Minty, Citrusy, Refreshing",
                            Ingredients = "Mint leaves, Lime juice, Soda water, Sugar",
                            IsActive = true,
                            ModifiedDate = new DateTime(2024, 8, 5, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(3348),
                            Name = "Virgin Mojito",
                            PreparationMethod = "Muddle mint leaves with sugar and lime juice. Add soda water and ice.",
                            Price = 120m,
                            StockQuantity = 20
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 7, 26, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(3352),
                            Description = "Tropical blend of pineapple and coconut.",
                            FlavorProfile = "Tropical, Sweet, Creamy",
                            Ingredients = "Pineapple juice, Coconut milk, Ice",
                            IsActive = true,
                            ModifiedDate = new DateTime(2024, 8, 5, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(3353),
                            Name = "Pineapple Coconut Delight",
                            PreparationMethod = "Blend all ingredients until smooth. Serve chilled.",
                            Price = 110m,
                            StockQuantity = 30
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 7, 28, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(3356),
                            Description = "A sweet and tangy blend of mixed berries.",
                            FlavorProfile = "Fruity, Tangy, Refreshing",
                            Ingredients = "Strawberries, Blueberries, Raspberries, Lemon juice, Soda water",
                            IsActive = true,
                            ModifiedDate = new DateTime(2024, 8, 5, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(3356),
                            Name = "Berry Blast",
                            PreparationMethod = "Blend berries with lemon juice. Top with soda water and serve over ice.",
                            Price = 135m,
                            StockQuantity = 25
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 7, 24, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(3358),
                            Description = "Sparkling mango drink with a hint of lime.",
                            FlavorProfile = "Mango, Citrusy, Sparkling",
                            Ingredients = "Mango puree, Lime juice, Sparkling water",
                            IsActive = true,
                            ModifiedDate = new DateTime(2024, 8, 5, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(3359),
                            Name = "Mango Fizz",
                            PreparationMethod = "Mix mango puree and lime juice. Add sparkling water and serve over ice.",
                            Price = 135m,
                            StockQuantity = 35
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 7, 18, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(3361),
                            Description = "Cool and refreshing cucumber drink with mint.",
                            FlavorProfile = "Fresh, Minty, Light",
                            Ingredients = "Cucumber, Mint leaves, Lemon juice, Soda water",
                            IsActive = true,
                            ModifiedDate = new DateTime(2024, 8, 5, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(3361),
                            Name = "Cucumber Cooler",
                            PreparationMethod = "Blend cucumber and mint. Add lemon juice and soda water. Serve chilled.",
                            Price = 125m,
                            StockQuantity = 40
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 7, 16, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(3363),
                            Description = "A vibrant blend of orange and grenadine.",
                            FlavorProfile = "Citrusy, Sweet, Vibrant",
                            Ingredients = "Orange juice, Grenadine syrup, Ice",
                            IsActive = true,
                            ModifiedDate = new DateTime(2024, 8, 5, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(3364),
                            Name = "Orange Sunset",
                            PreparationMethod = "Mix orange juice and grenadine. Serve over ice for a layered effect.",
                            Price = 120m,
                            StockQuantity = 50
                        });
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.MoctailCategory", b =>
                {
                    b.Property<int>("MoctailId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MoctailId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("MoctailCategories", (string)null);

                    b.HasData(
                        new
                        {
                            MoctailId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            MoctailId = 1,
                            CategoryId = 2
                        },
                        new
                        {
                            MoctailId = 2,
                            CategoryId = 3
                        },
                        new
                        {
                            MoctailId = 3,
                            CategoryId = 1
                        },
                        new
                        {
                            MoctailId = 3,
                            CategoryId = 2
                        },
                        new
                        {
                            MoctailId = 4,
                            CategoryId = 4
                        },
                        new
                        {
                            MoctailId = 5,
                            CategoryId = 3
                        },
                        new
                        {
                            MoctailId = 6,
                            CategoryId = 5
                        });
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.Pattisserie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Allergens")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("real");

                    b.Property<string>("ShelfLife")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("PattisserieProducts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Allergens = "Dairy, Nuts, Gluten",
                            CreatedDate = new DateTime(2024, 7, 21, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(6474),
                            Description = "Traditional French dessert made with choux pastry and praline-flavored cream.",
                            Ingredients = "Choux pastry, Praline cream, Almonds",
                            IsActive = true,
                            ModifiedDate = new DateTime(2024, 8, 5, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(6478),
                            Name = "Paris Brest",
                            Price = 155m,
                            ShelfLife = "2 days in refrigerator",
                            StockQuantity = 20
                        },
                        new
                        {
                            Id = 2,
                            Allergens = "Dairy, Gluten, Eggs",
                            CreatedDate = new DateTime(2024, 7, 26, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(6486),
                            Description = "Classic Italian dessert with coffee-soaked ladyfingers and mascarpone cheese.",
                            Ingredients = "Ladyfingers, Mascarpone cheese, Coffee, Cocoa",
                            IsActive = true,
                            ModifiedDate = new DateTime(2024, 8, 5, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(6486),
                            Name = "Tiramisu",
                            Price = 145m,
                            ShelfLife = "3 days refrigerated",
                            StockQuantity = 30
                        },
                        new
                        {
                            Id = 3,
                            Allergens = "Nuts, Gluten",
                            CreatedDate = new DateTime(2024, 7, 31, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(6491),
                            Description = "Traditional Turkish dessert made with layers of filo pastry, nuts, and honey syrup.",
                            Ingredients = "Filo pastry, Walnuts, Honey syrup",
                            IsActive = true,
                            ModifiedDate = new DateTime(2024, 8, 5, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(6491),
                            Name = "Baklava",
                            Price = 700m,
                            ShelfLife = "5 days",
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = 4,
                            Allergens = "Dairy, Gluten",
                            CreatedDate = new DateTime(2024, 7, 16, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(6495),
                            Description = "Rich dessert with a cream cheese filling on a graham cracker crust.",
                            Ingredients = "Cream cheese, Graham crackers, Sugar",
                            IsActive = true,
                            ModifiedDate = new DateTime(2024, 8, 5, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(6496),
                            Name = "Cheesecake",
                            Price = 150m,
                            ShelfLife = "5 days refrigerated",
                            StockQuantity = 40
                        },
                        new
                        {
                            Id = 5,
                            Allergens = "Dairy, Gluten, Eggs",
                            CreatedDate = new DateTime(2024, 7, 26, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(6498),
                            Description = "Long French pastry made with choux dough filled with cream and topped with icing.",
                            Ingredients = "Choux pastry, Chocolate icing, Pastry cream",
                            IsActive = true,
                            ModifiedDate = new DateTime(2024, 8, 5, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(6499),
                            Name = "Éclair",
                            Price = 80m,
                            ShelfLife = "1 day",
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = 6,
                            Allergens = "Gluten, Dairy",
                            CreatedDate = new DateTime(2024, 7, 29, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(6501),
                            Description = "Light, flaky pastry with a variety of sweet fillings.",
                            Ingredients = "Flour, Butter, Sugar, Fruit filling",
                            IsActive = true,
                            ModifiedDate = new DateTime(2024, 8, 5, 16, 51, 9, 915, DateTimeKind.Local).AddTicks(6501),
                            Name = "Danish Pastry",
                            Price = 140m,
                            ShelfLife = "2 days",
                            StockQuantity = 60
                        });
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.PattisserieCategory", b =>
                {
                    b.Property<int>("PattisserieId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PattisserieId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("PattisserieCategories", (string)null);

                    b.HasData(
                        new
                        {
                            PattisserieId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            PattisserieId = 1,
                            CategoryId = 3
                        },
                        new
                        {
                            PattisserieId = 2,
                            CategoryId = 2
                        },
                        new
                        {
                            PattisserieId = 3,
                            CategoryId = 1
                        },
                        new
                        {
                            PattisserieId = 4,
                            CategoryId = 4
                        },
                        new
                        {
                            PattisserieId = 5,
                            CategoryId = 2
                        },
                        new
                        {
                            PattisserieId = 5,
                            CategoryId = 5
                        },
                        new
                        {
                            PattisserieId = 2,
                            CategoryId = 4
                        },
                        new
                        {
                            PattisserieId = 3,
                            CategoryId = 2
                        },
                        new
                        {
                            PattisserieId = 4,
                            CategoryId = 3
                        });
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.CoffeeCategory", b =>
                {
                    b.HasOne("CoffeePattisserie.Entity.Concrete.Category", "Category")
                        .WithMany("CoffeeCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeePattisserie.Entity.Concrete.Coffee", "Coffee")
                        .WithMany("CoffeeCategories")
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Coffee");
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.MoctailCategory", b =>
                {
                    b.HasOne("CoffeePattisserie.Entity.Concrete.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeePattisserie.Entity.Concrete.Moctail", "Moctail")
                        .WithMany("MoctailCategories")
                        .HasForeignKey("MoctailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Moctail");
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.PattisserieCategory", b =>
                {
                    b.HasOne("CoffeePattisserie.Entity.Concrete.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeePattisserie.Entity.Concrete.Pattisserie", "Pattisserie")
                        .WithMany("PattisserieCategories")
                        .HasForeignKey("PattisserieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Pattisserie");
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.Category", b =>
                {
                    b.Navigation("CoffeeCategories");
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.Coffee", b =>
                {
                    b.Navigation("CoffeeCategories");
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.Moctail", b =>
                {
                    b.Navigation("MoctailCategories");
                });

            modelBuilder.Entity("CoffeePattisserie.Entity.Concrete.Pattisserie", b =>
                {
                    b.Navigation("PattisserieCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
